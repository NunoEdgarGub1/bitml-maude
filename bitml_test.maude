cd /home/nicola/repositories/bitml-maude
load bitml.maude


cd /home/nicola/repositories/MUnit
load mUnit.maude
(munit BITML-CHECK-TEST is
	***
	***    assertEqual(t, t')
	***
	***        passes if both t and t' are reduced to the same normal form by means of equations.
	***
	***
	***    assertDifferent(t, t')
	***
	***        passes if the normal forms of t and t' are different.
	***
	***
	***    assertTrue(t)
	***
	***        passes if the normal form of t is true.
	***
	***
	***    assertFalse(t)
	***
	***        passes if the normal form of t is false.
	***
	***
	***    assertReachable(t, t')
	***
	***        passes if t' is reachable from t within an unbounded number of steps.
	***
	***
	***    assertReachableBnd(t, t', bnd)
	***
	***        passes if t' is reachable from t within bnd steps.
	***
	***
	***    hasSolution(t, pat, mode, bound, cond)}
	***
	***        passes when there exists at least one reachable term that, starting from t, matches the pattern pat and
	***        fulfills the condition cond in at most bound (either unbounded or a natural number) steps. The mode can
	***        be either *, for 0 or more steps; +, for 1 or more steps; and !, for final states.
	***
	***
	***    noSolution(t, pat, mode, bound, cond)
	***
	***        passes when no reachable solution was expected from t, matching the pattern pat and fulfilling the condition cond in at most bound.
	***

    *** fresh(_)
    assertEqual(fresh(empty), x("x_0"))
    assertEqual(fresh(x("x_0")), x("x_1"))
    assertEqual(fresh(x("x_0"),x("x_1")), x("x_2"))
    assertEqual(fresh(x("x_1")), x("x_0"))
    assertEqual(fresh(x("x_1"),x("x_2")), x("x_0"))
    
    *** fresh(_,_)
    assertEqual(fresh(empty,3), x("x_0"), x("x_1"), x("x_2"))
    assertEqual(fresh((x("x_1"), x("x_2")),3), x("x_0"), x("x_3"), x("x_4"))

    assertEqual(tau . 0, put empty reveal empty if true . 0)
    assertEqual(put x . 0, put x reveal empty if true . 0)
    assertEqual(put x if p . 0, put x reveal empty if p . 0)
    assertEqual(reveal a . 0, put empty reveal a if true . 0)
    assertEqual(reveal a if p . 0, put empty reveal a if p . 0)
    assertEqual(put x reveal a . 0, put x reveal a if true . 0)

    *** $eval e [S]
    assertEqual($eval const(42) [S:Configuration], Success(42))
    assertEqual($eval const(42) + const(1) [S:Configuration], Success(43))
    assertEqual($eval | ref(a:Secret) | [ A:Participant : a:Secret # 10  | S:Configuration], Success(10))
    assertEqual($eval | ref(a:Secret) | [{A:Participant : a:Secret # 10} | S:Configuration], Failure("Unable to evaluate the expression"))
    
    assertEqual(after 0 : D, D)
    assertEqual(after 5 : after 10 : D, after 10 : D)

    assertEqual(A : A : D, A : D)
    assertEqual(A : B : D, (A, B) : D)
    assertEqual(A : B : A : D, (A, B) : D)
    assertEqual((B, A) : D, (A, B) : D)

    assertEqual(names in (< 0 , v > x | < 0 , v > y) , (x, y)  )
    assertEqual(ticks( < after 10 : tau . after 5 : tau . 0 , v > x ), (5 10)  )
    assertEqual(toSemConf (< 0 , v > x | < 0 , v > y) , [0 | nil | x,y] (< 0 , v > x | < 0 , v > y)  )

    assertEqual( (< (A, B) : D, v > x), < (A, B) : D, v > x )

    *** auth-destroy 
    assertReachableBnd((toSemConf < A, v > x), ({A authorize-destroy-of x} (ctx:Context < A, v > x | A[ x |># ])), 1)

    *** destroy
    assertReachableBnd( (toSemConf < A, v > x), ({destroy x} ctx:Context 0), 2)

    *** split
    assertReachableBnd(
        (toSemConf < split(v' ~> (withdraw A) v'' ~> (withdraw B)), v > x),
        ({split x} [t:Nat | t^:List{Nat<} | x, x("x_0"), x("x_1")] < withdraw A, v' > x("x_0") | < withdraw B, v'' > x("x_1")),
        2)

    *** put
    assertReachableBnd(
        (toSemConf < put y . 0, v > x | < A, v' > y),
        ({put(y,empty,x)} [t:Nat | t^:List{Nat<} | x, y, x("x_0")] < 0, v > x("x_0")),
        1)
    *** reveal
    assertReachableBnd(
        (toSemConf < reveal a . 0, v > x | (A : a # N) ),
        ({put(empty,a,x)} [t:Nat | t^:List{Nat<} | x, x("x_0")] < 0, v > x("x_0") | (A : a # N)),
        1)
    *** withdraw
    assertReachableBnd(
        (toSemConf < withdraw A, v > x),
        ({A withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < A, v > x("x_0")),
        1)

    *** sum
    assertReachableBnd(
        (toSemConf < withdraw A + withdraw B, v > x),
        ({A withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < A, v > x("x_0")),
        1)

    assertReachableBnd(
        (toSemConf < withdraw A + withdraw B, v > x),
        ({B withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < B, v > x("x_0")),
        1)

    assertReachable(
        (toSemConf < tau . withdraw A + tau . withdraw B, v > x), 
         {put(empty,empty,x)} [t:Nat | t^:List{Nat<} | x, x("x_0")] < withdraw A, v > x("x_0"))  *** choose first tau
 
    assertReachable(
        (toSemConf < tau . withdraw A + tau . withdraw B, v > x), 
         {put(empty,empty,x)} [t:Nat | t^:List{Nat<} | x, x("x_0")] < withdraw B, v > x("x_0"))  *** choose second tau
 
    assertReachable(
        (toSemConf < tau . withdraw A + tau . withdraw B, v > x),
        {A withdraw v from x("x_0")} [t:Nat | t^:List{Nat<} | x, x("x_0"), x("x_1")] < A, v > x("x_1"))

    assertReachable(
        (toSemConf < tau . withdraw A + tau . withdraw B, v > x),
        {B withdraw v from x("x_0")} [t:Nat | t^:List{Nat<} | x, x("x_0"), x("x_1")] < B, v > x("x_1"))

    assertReachable(
        (toSemConf < withdraw A + withdraw B, v > x),
        {A withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < A, v > x("x_0"))

    assertReachable(
        (toSemConf < withdraw A + withdraw B, v > x),
        {B withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < B, v > x("x_0"))

    assertReachable(
        (toSemConf < A : withdraw B, v > x),
        {A authorize withdraw B in x} [t:Nat | t^:List{Nat<} | x] < A : withdraw B, v > x | A [ x |> A : withdraw B ])

    assertReachable(
        (toSemConf < A : withdraw B, v > x), 
        {B withdraw v from x} [t:Nat | t^:List{Nat<} | x, x("x_0")] < B, v > x("x_0"))

    assertReachable(
        (toSemConf < A : withdraw B, v > x), 
        {destroy x("x_0")} [t:Nat | t^:List{Nat<} | x, x("x_0")] 0)
    
endu)