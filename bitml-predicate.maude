***
*** Given a Configuration, check if it satisfies a Predicate
***

set print attribute on .    *** enable print attribute (see equation with Failure("..."))

fmod BITML-PREDICATE-SAT is
    protecting BITML-SYNTAX .
    protecting BITML-AUX .
    protecting SATISFACTION .
    subsort Configuration < State .

    var b b' : Bool .
    var P P' : Predicate .
    var S S' : Configuration .
    var a : Secret .
    var a^ : Set{Secret} .
    var n m x y s t : Nat .
    var N : Nat .
    var A : Participant .
    vars E E' E'' : Expression .
    vars p p' : Predicate .

    op predicate_ : Predicate -> Prop .

    ***
    *** A configuration satisfies a predicate if it evaluates to Success(true)
    ***
    eq S |= predicate P = [ P ] { S } == Success(true) .
    ceq S | S' |= predicate P = S |= predicate P or-else S' |= predicate P if S =/= 0 /\ S' =/= 0 .
    eq S |= predicate P = false [owise] .


    ***
    *** Simplifications
    ***
    eq ! ! P = P .
    eq ! True = False .
    eq ! False = True .
    eq True && P = P .
    eq False && P = False .


    ***
    *** Size definition for natural numbers
    ***
    eq | const(0) | = const(0) .
    eq | const(n) | = const( rat( ceiling( (log(float(n) + 1.0)) / (log(float(2))) / 7.0 ) ) ) .


    ***
    *** Evaluation of predicates
    ***
    op [_] {_} : Predicate Configuration -> Try .
    eq [ True ] { S } = Success(true) .
    eq [ False ] { S } = Success(false) .
    ceq [ P && P' ] { S } = Success(b and b') if Success(b) := [ P ] { S } /\ Success(b') := [ P' ] { S } .
    ceq [ ! P ] { S } = Success(not b) if Success(b) := [ P ] { S } .
    ceq [ E == E' ] { S } = Success(n == m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .
    ceq [ E < E' ] { S } = Success(n < m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .

    eq [ P ] { S } = Failure("Unable to evaluate the predicate") [owise print "Error evaluating " P " in " S] .
    
    ***
    *** Evaluation of expressions
    ***
    op [_] {_} : Expression Configuration -> Try .
    eq [ const(n) ] { S } = Success(n) .
    eq [ | ref(a) | ] { (A : a # N) | S } = Success(N) .
    ceq [ | E | ] { S } = Success(m) if Success(n) := [ E ] { S } /\ const(m) := | const(n) | .
    ceq [ E + E' ] { S } = Success(n + m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .

    eq [ E ] { S } = Failure("Unable to evaluate the expression") [owise print "Error evaluating " E " in " S] .
endfm
