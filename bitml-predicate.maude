
load bitml-syntax.maude
load bitml-aux.maude
load range.maude

fmod BITML-PREDICATE-SAT is
    protecting BITML-SYNTAX .
    protecting BITML-AUX .
    protecting SATISFACTION .
    protecting RANGE .
    subsort Configuration < State .

    op predicate_ : Predicate -> Prop .

    var b b' : Bool .
    var P P' : Predicate .
    var S S' : Configuration .
    var a : Secret .
    var a^ : Set{Secret} .
    var n m x y s t : Nat .
    var N : Nat .
    var A : Participant .
    vars E E' E'' : Expression .
    vars p p' : Predicate .
    vars R R' : Range .

    ***
    *** Extra operations
    ***
    op _||_ : Predicate Predicate -> Predicate [prec 25 comm] .
    op _<=_ : Expression Expression -> Predicate [prec 22] .
    op _>_ : Expression Expression -> Predicate [prec 22] .
    op _>=_ : Expression Expression -> Predicate [prec 22] .
    op _!=_ : Expression Expression -> Predicate [prec 22 comm] .
    op _<=_<=_ : Expression Expression Expression -> Predicate [prec 22] .
    op _<_<_ : Expression Expression Expression -> Predicate [prec 22] .
    op _<=_<_ : Expression Expression Expression -> Predicate [prec 22] .
    op _<_<=_ : Expression Expression Expression -> Predicate [prec 22] .
    eq P || P' = !(! P && ! P') .
    eq E <= E' = E < E' || E == E' .
    eq E > E' = !(E <= E') .
    eq E >= E' = !(E < E') .
    eq E != E' = !(E == E') .
    eq E <= E' <= E'' = E <= E' && E' <= E'' .
    eq E < E' < E'' = E < E' && E' < E'' .
    eq E <= E' < E'' = E <= E' && E' < E'' .
    eq E < E' <= E'' = E < E' && E' <= E'' .

    ***
    *** Simplifications
    ***
    eq ! ! P = P .
    eq ! True = False .
    eq ! False = True .
    eq True && P = P .
    eq False && P = False .

    ***
    *** Size definition
    ***
    eq | const(0) | = const(0) .
    eq | const(n) | = const( rat( ceiling( (log(float(n) + 1.0)) / (log(float(2))) / 7.0 ) ) ) .

    eq S |= predicate P = [ P ] { S } == Success(true) .
    ceq S | S' |= predicate P = S |= predicate P or-else S' |= predicate P if S =/= 0 /\ S' =/= 0 .
    eq S |= predicate P = false [owise] .

    op toExp_ : Bool -> Predicate [prec 65] .
    eq toExp true = True .
    eq toExp false = False .

    ***
    *** Evaluation
    ***
    op [_] {_} : Predicate Configuration -> Try .
    eq [ True ] { S } = Success(true) .
    eq [ False ] { S } = Success(false) .
    ceq [ P && P' ] { S } = Success(b and b') if Success(b) := [ P ] { S } /\ Success(b') := [ P' ] { S } .
    ceq [ ! P ] { S } = Success(not b) if Success(b) := [ P ] { S } .
    ceq [ E == E' ] { S } = Success(n == m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .
    ceq [ E < E' ] { S } = Success(n < m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .
    
    op [_] {_} : Expression Configuration -> Try .
    eq [ const(n) ] { S } = Success(n) .
    eq [ | ref(a) | ] { (A : a # N) | S } = Success(N) .
    ceq [ | E | ] { S } = Success(m) if Success(n) := [ E ] { S } /\ const(m) := | const(n) | .
    ceq [ E + E' ] { S } = Success(n + m) if Success(n) := [ E ] { S } /\ Success(m) := [ E' ] { S } .

    eq [ P ] { S } = Failure("Unable to evaluate the predicate") [owise print "Error evaluating " P " in " S] .
    eq [ E ] { S } = Failure("Unable to evaluate the expression") [owise print "Error evaluating " E " in " S] .


    sort PredicateSolution .

    op nil : -> PredicateSolution .
    op _in_ : Secret Range -> PredicateSolution [ctor prec 40] .
    op _and_ : PredicateSolution PredicateSolution -> PredicateSolution [comm assoc id: nil].

    op solution of _ : Predicate -> PredicateSolution .
    eq solution of p = $solution of p (secrets in p) .
    op $solution of _ _ : Predicate Set{Secret} -> PredicateSolution .
    eq $solution of p empty = nil .     
    eq $solution of p (a, a^) = (a in (range a p)) and ($solution of p a^) .     

    op range__ : Secret Predicate -> Range .
    eq range a True = all .
    eq range a False = ][  .
    ceq range a (p && p') = (range a p) âˆ© (range a p') if a in (secrets in p) and a in (secrets in p').
    ceq range a (p && p') = (range a p) if a in (secrets in p) .
    ceq range a (p && p') = (range a p') if a in (secrets in p') .
    ceq range a (! p) = ~ (range a p) if a in (secrets in p) .
    ceq range a (| ref(a) | < E) = [0 ; n] if Success(n) := [ E ] {0} .
    ceq range a (E < | ref(a) |) = [n + 1 ; Inf] if Success(n) := [ E ] {0} .
    ceq range a (| ref(a) | == E) = [n] if Success(n) := [ E ] {0} .
    eq range a p = all [owise] .
endfm
















